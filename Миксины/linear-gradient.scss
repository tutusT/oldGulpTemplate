@if global-variable-exists(fix) {
  $gfix: $fix;
} @else {
  $gfix: null;
}

@function deprecated-webkit-gradient($type, $deprecated-pos1, $deprecated-pos2, $full) {
  $gradient-list: ();
  $gradient: false;
  $full-length: length($full);
  $percentage: false;
  $gradient-type: $type;

  @for $i from 1 through $full-length {
    $gradient: nth($full, $i);

    @if length($gradient) == 2 {
      $color-stop: color-stop(nth($gradient, 2), nth($gradient, 1));
      $gradient-list: join($gradient-list, $color-stop, comma);
    }

    @else if $gradient != null {
      @if $i == $full-length {
        $percentage: 100%;
      }

      @else {
        $percentage: ($i - 1) * (100 / ($full-length - 1)) + "%";
      }

      $color-stop: color-stop(unquote($percentage), $gradient);
      $gradient-list: join($gradient-list, $color-stop, comma);
    }
  }

  @if $type == linear {
    $gradient: -webkit-gradient(linear, $deprecated-pos1, $deprecated-pos2, $gradient-list);
  }

  @return $gradient;
}

@function _linear-positions-parser($pos) {
  $type: type-of(nth($pos, 1));
  $spec: null;
  $degree: null;
  $side: null;
  $corner: null;
  $length: length($pos);
  // Parse Side and corner positions
  @if ($length > 1) {
    @if nth($pos, 1) == "to" { // Newer syntax
      $side: nth($pos, 2);

      @if $length == 2 { // eg. to top
        // Swap for backwards compatability
        $degree: _position-flipper(nth($pos, 2));
      }
      @else if $length == 3 { // eg. to top left
        $corner: nth($pos, 3);
      }
    }
    @else if $length == 2 { // Older syntax ("top left")
      $side: _position-flipper(nth($pos, 1));
      $corner: _position-flipper(nth($pos, 2));
    }

    @if ("#{$side} #{$corner}" == "left top") or ("#{$side} #{$corner}" == "top left") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if ("#{$side} #{$corner}" == "right top") or ("#{$side} #{$corner}" == "top right") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if ("#{$side} #{$corner}" == "right bottom") or ("#{$side} #{$corner}" == "bottom right") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if ("#{$side} #{$corner}" == "left bottom") or ("#{$side} #{$corner}" == "bottom left") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    $spec: to $side $corner;
  }
  @else if $length == 1 {
    // Swap for backwards compatability
    @if $type == string {
      $degree: $pos;
      $spec: to _position-flipper($pos);
    }
    @else {
      $degree: -270 - $pos; //rotate the gradient opposite from spec
      $spec: $pos;
    }
  }
  $degree: unquote($degree + ",");
  $spec:   unquote($spec + ",");
  @return $degree $spec;
}

@function _position-flipper($pos) {
  @return if($pos == left, right, null)
  if($pos == right, left, null)
  if($pos == top, bottom, null)
  if($pos == bottom, top, null);
}

@mixin linear-gradient($pos, $G1, $G2: null, $G3: null, $G4: null, $G5: null, $G6: null, $G7: null, $G8: null, $G9: null, $G10: null, $color: null, $ie_fix: $gfix) {
  // Detect what type of value exists in $pos
  $pos-type: type-of(nth($pos, 1));
  $pos-spec: null;
  $pos-degree: null;

  // If $pos is missing from mixin, reassign vars and add default position
  @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
    $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;
    $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;
    $pos: null;
  }

  @if $pos {
    $positions: _linear-positions-parser($pos);
    $pos-degree: nth($positions, 1);
    $pos-spec:   nth($positions, 2);
  }

  $full: $G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10;

  // If $fallback is a color use that color as the fallback color
  @if (type-of($color) == color) or ($color == "transparent") {
    $fallback-color: $color;
  }

  $old_webkit: true;
  @if type-of(nth($pos, 1)) != string {
    $old_webkit: false;
    $ie_type: false;
  }

  @if (variable-exists(old_webkit) and global-variable-exists(support-for-original-webkit-gradients)) or (($ie_fix == filter) and global-variable-exists(legacy-support-for-ie8)) {
    @if $pos-spec == "to bottom," {
      $deprecated-pos1: unquote("left top");
      $deprecated-pos2: unquote("left bottom");
      $ie_type: 0;
      $ie_filter_dir: normal;
    }
    @else if $pos-spec == "to top," {
      $deprecated-pos1: unquote("left bottom");
      $deprecated-pos2: unquote("left top");
      $ie_type: 0;
      $ie_filter_dir: reverse;
    }
    @else if $pos-spec == "to right," {
      $deprecated-pos1: unquote("left top");
      $deprecated-pos2: "right top";
      $ie_type: 1;
      $ie_filter_dir: normal;
    }
    @else if $pos-spec == "to left," {
      $deprecated-pos1: unquote("right top");
      $deprecated-pos2: unquote("left top");
      $ie_type: 1;
      $ie_filter_dir: reverse;
    }
    @else if $pos-spec == "to top left," {
      $deprecated-pos1: unquote("right bottom");
      $deprecated-pos2: unquote("left top");
    }
    @else if $pos-spec == "to top right," {
      $deprecated-pos1: unquote("left bottom");
      $deprecated-pos2: unquote("right top");
    }
    @else if $pos-spec == "to bottom left," {
      $deprecated-pos1: unquote("right top");
      $deprecated-pos2: unquote("left bottom");
    }
    @else if $pos-spec == "to bottom right," {
      $deprecated-pos1: unquote("left top");
      $deprecated-pos2: unquote("right bottom");
    }
  }

  @if $color {background-color: $fallback-color;}
  @if variable-exists(old_webkit) and global-variable-exists(support-for-original-webkit-gradients) and variable-exists(deprecated-pos1) and variable-exists(deprecated-pos2) {background-image: deprecated-webkit-gradient(linear, $deprecated-pos1, $deprecated-pos2, $full);}
  @if global-variable-exists(experimental-support-for-opera) {background-image: -o-linear-gradient($pos-degree $full);}
  @if global-variable-exists(experimental-support-for-mozilla) {background-image: -moz-linear-gradient($pos-degree $full);}
  @if global-variable-exists(experimental-support-for-webkit) {background-image: -webkit-linear-gradient($pos-degree $full);}
  @if global-variable-exists(experimental-support-for-microsoft) {background-image: -ms-linear-gradient($pos-degree $full);}
  background-image: unquote("linear-gradient(#{$pos-spec} #{$full})");
  @if $ie_fix == pie and global-variable-exists(legacy-support-for-ie) and global-variable-exists(experimental-support-for-pie) {
    -pie-background: unquote("linear-gradient(#{$pos-spec} #{$full})");
  }
  @if ($ie_fix == filter) and global-variable-exists(legacy-support-for-ie8) and variable-exists(ie_type) and variable-exists(ie_filter_dir) and (nth($full, 3) == null) {
    @if $ie_filter_dir == normal {
      $ie_st: ie-hex-str(nth(nth($full, 1), 1));
      $ie_sp: ie-hex-str(nth(nth($full, 2), 1));
    }
    @else if $ie_filter_dir == reverse {
      $ie_st: ie-hex-str(nth(nth($full, 2), 1));
      $ie_sp: ie-hex-str(nth(nth($full, 1), 1));
    }
    -ms-filter: "progid:DXImageTransform.Microsoft.Gradient(GradientType=#{$ie_type}, StartColorStr='#{$ie_st}', EndColorStr='#{$ie_sp}')";
  }
}